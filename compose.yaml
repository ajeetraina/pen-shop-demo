services:
  # Custom Pen Store Frontend
  pen-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    hostname: pen-frontend
    ports:
      - 9090:80
    restart: always
    environment:
      - CATALOGUE_SERVICE_HOST=pen-catalogue
      - CATALOGUE_SERVICE_PORT=8081
      - API_BASE_URL=http://pen-catalogue:8081
    depends_on:
      - pen-catalogue
    networks:
      - pen-shop-network

  # Custom Pen Catalogue Service
  pen-catalogue:
    build:
      context: ./catalogue-service
      dockerfile: Dockerfile
    hostname: pen-catalogue
    restart: always
    ports:
      - 8081:8081
    environment:
      - MYSQL_HOST=catalogue-db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=pendb
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
    depends_on:
      - catalogue-db
    networks:
      - pen-shop-network

  # MySQL Database for Pen Catalogue
  catalogue-db:
    image: mysql:8.0
    hostname: catalogue-db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=pendb
      - MYSQL_USER=penuser
      - MYSQL_PASSWORD=penpass
    volumes:
      - ./data/mysql-init:/docker-entrypoint-initdb.d:ro
      - mysql_data:/var/lib/mysql
    ports:
      - 3306:3306
    networks:
      - pen-shop-network

  # MongoDB for Reviews and Agent Data
  mongodb:
    image: mongo:latest
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=penstore
    volumes:
      - ./data/mongodb-init:/docker-entrypoint-initdb.d:ro
      - mongodb_data:/data/db
    command: [mongod, --quiet, --logpath, /var/log/mongodb/mongod.log, --logappend]
    healthcheck:
      test: [CMD, mongosh, --eval, "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pen-shop-network

  # Agent UI (React App)
  adk-ui:
    build:
      context: ./adk-ui
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - REACT_APP_STORE_NAME=Moby Pen Shop
      - REACT_APP_CATALOGUE_URL=http://localhost:8081
    depends_on:
      - adk-backend
    networks:
      - pen-shop-network

  # Agent Backend (Go with ADK)
  adk-backend:
    build:
      context: ./adk-backend
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    environment:
      - MCPGATEWAY_ENDPOINT=http://mcp-gateway:8811/sse
      - CATALOGUE_URL=http://pen-catalogue:8081
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/penstore
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - AI_DEFAULT_MODEL=openai/gpt-4
    depends_on:
      - mcp-gateway
      - pen-catalogue
      - mongodb
    secrets:
      - openai-api-key
    models:
      qwen3:
        endpoint_var: MODEL_RUNNER_URL
        model_var: MODEL_RUNNER_MODEL
    networks:
      - pen-shop-network

  # MCP Gateway
  mcp-gateway:
    image: docker/mcp-gateway:latest
    ports:
      - 8811:8811
    use_api_socket: true
    command:
      - --transport=sse
      - --servers=fetch,brave,curl,mongodb
      - --config=/mcp_config
      - --verbose
    configs:
      - mcp_config
    depends_on:
      mongodb:
        condition: service_healthy
    # Mount Docker socket to allow spawned containers to join the same network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Pass the network name to mcp-gateway so spawned containers can join it
      - DOCKER_NETWORK=${COMPOSE_PROJECT_NAME:-pen-shop-demo}_pen-shop-network
    networks:
      - pen-shop-network

models:
  qwen3:
    model: ai/qwen3:14B-Q6_K
    context_size: 32768

volumes:
  mysql_data:
  mongodb_data:

# Define explicit network for all services
networks:
  pen-shop-network:
    driver: bridge

configs:
  mcp_config:
    content: |
      mongodb:
        connection_string: mongodb://admin:password@mongodb:27017/penstore
      brave:
        api_key: ${BRAVE_API_KEY}

secrets:
  openai-api-key:
    file: secret.openai-api-key
