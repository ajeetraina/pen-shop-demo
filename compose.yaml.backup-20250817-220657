services:
  # Frontend with your custom UI
  pen-front-end:
    image: nginxinc/nginx-unprivileged:alpine
    ports:
      - "9091:8080"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html:ro
    networks:
      - pen-shop-network
    depends_on:
      - pen-catalogue
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main MongoDB instance
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=penstore
    networks:
      - pen-shop-network
    command: [mongod, --quiet, --logpath, /var/log/mongodb/mongod.log, --logappend]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Pen Catalogue MCP Server
  pen-catalogue-mcp:
    build:
      context: ./pen-catalog-mcp
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    networks:
      - pen-shop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Gateway - properly configured
  mcp-gateway:
    image: docker/mcp-gateway:latest
    ports:
      - "8811:8811"
    networks:
      - pen-shop-network
    command:
      - --transport=sse
      - --servers=pen-catalog,mongodb,fetch,curl
      - --config=/mcp_config
      - --secrets=docker-desktop:/run/secrets/mcp_secret
      - --verbose
    configs:
      - mcp_config
    secrets:
      - mcp_secret
    depends_on:
      - mongodb
      - pen-catalogue-mcp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8811/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ADK Service - properly configured to use MCP Gateway
  adk:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - MCPGATEWAY_ENDPOINT=http://mcp-gateway:8811/sse
      - PEN_CATALOGUE_URL=http://pen-catalogue-mcp:3001
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - AI_DEFAULT_MODEL=openai/gpt-4
    networks:
      - pen-shop-network
    depends_on:
      - mcp-gateway
    secrets:
      - openai-api-key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ADK UI Service
  adk-ui:
    build:
      context: .
      dockerfile: Dockerfile.adk-ui
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://adk:8000
    networks:
      - pen-shop-network
    depends_on:
      - adk
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pen-shop-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local

# MCP Gateway Configuration
configs:
  mcp_config:
    content: |
      pen-catalog:
        enabled: true
        command: ["node", "/app/pen-catalog-server.js"]
        image: pen-shop-demo-pen-catalogue-mcp
        transport: stdio
        timeout: 30s
        environment:
          - PORT=3001
          - NODE_ENV=production
      
      mongodb:
        enabled: true
        image: mcp/mongodb:latest
        transport: stdio
        environment:
          - MDB_MCP_CONNECTION_STRING=mongodb://admin:password@mongodb:27017/penstore?authSource=admin
        timeout: 30s
        
      fetch:
        enabled: true
        image: mcp/fetch:latest
        transport: stdio
        timeout: 30s
        
      curl:
        enabled: true
        image: alpine/curl:latest
        transport: stdio
        timeout: 30s

# Secrets for API keys and MCP configuration
secrets:
  openai-api-key:
    file: secret.openai-api-key
  mcp_secret:
    file: ./.mcp.env
