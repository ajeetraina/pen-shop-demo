version: '3.8'

services:
  # Custom Pen Store Frontend
  pen-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    hostname: pen-frontend
    ports:
      - 9090:80
    restart: always
    environment:
      - CATALOGUE_SERVICE_HOST=pen-catalogue
      - CATALOGUE_SERVICE_PORT=8081
      - API_BASE_URL=http://pen-catalogue:8081
    depends_on:
      - pen-catalogue

  # Custom Pen Catalogue Service
  pen-catalogue:
    build:
      context: ./catalogue-service
      dockerfile: Dockerfile
    hostname: pen-catalogue
    restart: always
    ports:
      - 8081:8081
    environment:
      - MYSQL_HOST=catalogue-db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=pendb
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
    depends_on:
      - catalogue-db

  # MySQL Database for Pen Catalogue
  catalogue-db:
    image: mysql:8.0
    hostname: catalogue-db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=pendb
      - MYSQL_USER=penuser
      - MYSQL_PASSWORD=penpass
    volumes:
      - ./data/mysql-init:/docker-entrypoint-initdb.d:ro
      - mysql_data:/var/lib/mysql
    ports:
      - 3306:3306

  # MongoDB for Reviews and Agent Data
  mongodb:
    image: mongo:latest
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=penstore
    volumes:
      - ./data/mongodb-init:/docker-entrypoint-initdb.d:ro
      - mongodb_data:/data/db
    command: [mongod, --quiet, --logpath, /var/log/mongodb/mongod.log, --logappend]
    healthcheck:
      test: [CMD, mongosh, --eval, "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Agent UI (React App)
  adk-ui:
    build:
      context: ./adk-ui
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - REACT_APP_STORE_NAME=Moby Pen Shop
      - REACT_APP_CATALOGUE_URL=http://localhost:8081
      - REACT_APP_SECURITY_MODE=enabled
    depends_on:
      - adk-backend

  # Agent Backend (Go with ADK)
  adk-backend:
    build:
      context: ./adk-backend
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    environment:
      - MCPGATEWAY_ENDPOINT=http://mcp-gateway:8811/sse
      - CATALOGUE_URL=http://pen-catalogue:8081
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/penstore
      - OPENAI_BASE_URL=https://api.openai.com/v1
      - AI_DEFAULT_MODEL=openai/gpt-4
      - SECURITY_INTERCEPTORS_ENABLED=true
      - LOG_SECURITY_EVENTS=true
    depends_on:
      - mcp-gateway
      - pen-catalogue
      - mongodb
      - redis-cache
    secrets:
      - openai-api-key
    models:
      qwen3:
        endpoint_var: MODEL_RUNNER_URL
        model_var: MODEL_RUNNER_MODEL
    volumes:
      - ./logs:/app/logs

  # MCP Gateway with Security Interceptors
  mcp-gateway:
    image: docker/mcp-gateway:latest
    ports:
      - 8811:8811
    use_api_socket: true
    command:
      - --transport=sse
      - --servers=fetch,brave,curl,mongodb,github-official
      - --config=/mcp_config
      - --verbose
      - --log-calls
      - --block-secrets
      - --verify-signatures
      - --interceptor
      - "before:exec:/app/interceptors/security-filter.sh"
      - --interceptor
      - "after:exec:/app/interceptors/response-sanitizer.sh"
      - --interceptor
      - "before:tool_call:/app/interceptors/tool-access-guard.sh"
      - --interceptor
      - "after:tool_call:/app/interceptors/output-filter.sh"
    configs:
      - mcp_config
    volumes:
      - ./interceptors:/app/interceptors:ro
      - ./config:/app/config:ro
      - ./logs:/var/log:rw
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - MCP_LOG_LEVEL=debug
      - MCP_ENABLE_SECURITY=true
      - MCP_INTERCEPTOR_MODE=strict
      - REDIS_URL=redis://redis-cache:6379
    depends_on:
      - mongodb
      - redis-cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8811/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis-cache:
    image: redis:7-alpine
    ports:
      - 6379:6379
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-securepassword}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Security Dashboard for monitoring
  security-dashboard:
    build:
      context: ./security-dashboard
      dockerfile: Dockerfile
    ports:
      - 3001:3000
    environment:
      - MCP_GATEWAY_URL=http://mcp-gateway:8811
      - REDIS_URL=redis://redis-cache:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-securepassword}
      - DASHBOARD_TITLE=Pen Shop Security Monitor
      - LOG_PATH=/app/logs
    depends_on:
      - mcp-gateway
      - redis-cache
    volumes:
      - ./logs:/app/logs:ro
    profiles:
      - security
      - demo

  # Attack Simulator (for demonstration)
  attack-simulator:
    build:
      context: ./attack-simulator
      dockerfile: Dockerfile
    ports:
      - 3002:3000
    environment:
      - TARGET_BACKEND_URL=http://adk-backend:8000
      - MCP_GATEWAY_URL=http://mcp-gateway:8811
      - SIMULATION_MODE=safe
      - ATTACK_SCENARIOS=prompt_injection,data_exfiltration,tool_poisoning
    depends_on:
      - adk-backend
      - mcp-gateway
    profiles:
      - attack-sim
      - demo

models:
  qwen3:
    model: ai/qwen3:14B-Q6_K
    context_size: 32768

volumes:
  mysql_data:
  mongodb_data:
  redis_data:

configs:
  mcp_config:
    content: |
      mongodb:
        connection_string: mongodb://admin:password@mongodb:27017/penstore
      brave:
        api_key: ${BRAVE_API_KEY}
      github-official:
        api_key: ${GITHUB_API_KEY}
      security:
        interceptors_enabled: true
        log_level: debug
        rate_limiting: true
        content_filtering: true

secrets:
  openai-api-key:
    file: secret.openai-api-key
